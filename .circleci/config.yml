version: 2
jobs:
  build:
    environment:
      - API_DOCKER_IMAGE=api-ci
      - JOB_DOCKER_IMAGE=job-ci
    docker:
      - image: slideroom/dotnet:86
      - image: slideroom/elasticsearch:81
        environment:
          - ES_JAVA_OPTS=-Xms750m -Xmx750m
    steps:
      - checkout
      - run:
          name: Set version
          command: |
            echo "export BUILD_VERSION=5.0.$CIRCLE_BUILD_NUM" >> $BASH_ENV
            echo "export BUILD_SUFFIX=${CIRCLE_SHA1:0:7}" >> $BASH_ENV
      - run:
          name: Set version props
          working_directory: build
          command: |
            echo "<Project>
              <PropertyGroup>
                <VersionPrefix>$BUILD_VERSION</VersionPrefix>
                <VersionSuffix>$BUILD_SUFFIX</VersionSuffix>
              </PropertyGroup>
            </Project>" >| version.props
            cat version.props
      - run:
          name: Build
          command: dotnet publish -c Release -o published -r debian-x64
      - run:
          name: Integration Tests
          working_directory: tests/Exceptionless.Api.Tests
          command: dotnet test -c Release --logger trx
      - store_test_results:
          path: tests/Exceptionless.Api.Tests/TestResults
      - setup_remote_docker
      # - run:
      #     name: Build jobs docker image
      #     working_directory: src/Jobs
      #     command: docker build -t $JOB_DOCKER_IMAGE .
      - run:
          name: Build API docker image
          working_directory: src/Exceptionless.Web
          command: docker build -t $API_DOCKER_IMAGE .
      - deploy:
          name: Push docker images
          command: |
            if [ "${CIRCLE_BRANCH}" == "feature/core" ]; then
              echo "AppScope: $APP_SCOPE"

              BUILD_TAG="$BUILD_VERSION-$BUILD_SUFFIX"

              # Login to Docker
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

              # Tag and push docker image
              #for image in {$API_DOCKER_IMAGE,$JOB_DOCKER_IMAGE}; do  
                for tag in {$BUILD_TAG,latest}; do
                  (
                    docker tag $API_DOCKER_IMAGE exceptionless/$API_DOCKER_IMAGE:$tag
                    docker push exceptionless/$API_DOCKER_IMAGE:$tag
                  ) &
                done
              #done
              wait
            fi